
0 to 8.1
journey towards learning data structures we first have to understand the difference between data types and abstract data types so let's get started. 
8.1 to 97.73333333333333
what is the data type we have already discussed What data type is in R C programming lectures but let's discuss it one more time because there are certain points which are having discuss their important things that I haven't told you about the types although there is one point which is already clear but there is one more important point which I haven't told about data types post is it defines a certain domain of values we already know that a data type defines a certain domain of values right but there is one more important point which says that it defines operations allowed on those values not only it is defining certain do mean of values but it also defines what operations are allowed on those values for example you can think of integer type here we can take only integer value you already know that in this allows only integer values right but the operations allowed are addition subtraction multiplication bitwise operations at Sector we can perform almost every operation with integer type for the sake of understanding let's take another time type that is blood type it takes only floating point values we already know that the domain of values allowed in the case of float type are only floating point values but you operations which we can perform on floor tiles are addition subtraction multiplication division but we cannot perform bitwise and Mod operations on them this should be well noted it is clearly understandable that a data type not only defines a certain to mean of values but it also defines operations allowed on those values right now let's discuss. 
97.73333333333333 to 161.9
what is a user defined data type before moving on to abstract data types we should understand what is the user defined data type in contrast to primitive data types there is a concept of user defined data types we already know primitive data types like integer character float right but there is a concept of user Defined by which we should also know the operations and values of user defined data types or not specified in the language itself but is specified by the use of the user is defining the operations as well as the values it is not predefined in the language itself ok now here are the examples structure union and enumeration which we have already discussed by using structures by defining our own type by combining other data types by using structures we are defining a wrong type by combining other primitive types for example here in this case we have combined these two integers to form a new type that is point so it's a user defined data type this is our understanding about user define data types now let's try to understand what are abstract data types. 
161.9 to 216.0
editors or abstract data types are like user defined data types which defines operations on values using functions without specifying what is there inside the function and how the operations are performed first of all we are defining operations that is true but we are defining operations on values that is also true using functions it should be well noted that we are defining operations using functions without specifying what is there inside the function we are not specified anything inside what is there inside the function ok and how the operations are performed let's take an example of a stack editing a stack consists of elements of same type arranged in a sequential order so what type of elements are allowed in a stack the elements of same type and that too they are arranged in the sequential order we already know that right. 
216.0 to 311.06666666666666
now the operations allowed on them could be initialised we can define initialise function which initialises the stack to be empty actually we can perform of push operation that is insert an element into the stack we can perform pop operation that is delete an element from the stack we can check is Tak empty all week and Jack is back full so these are the operations which we can define and we can perform on stack these are functions as you can see here we are specified functions but we are not saying anything how they can be implemented we are just specifying them that is called abstract data type we know that what type of elements are allowed and we also know that what operations we can perform but we don't know what is there inside ok think of it as a black box which hides the inner structure and design of the data type from the user we can think of it like it hides all the implementation details from us this is very important that we will understand later there are multiple ways to implement and edit let me tell you this is very important there are multiple ways to implement in edit for example a stack entity can be implemented using arrays or linked lists it should be noted that site itself is a data structure we can implement this data structure using other data structures like a raise or linked list ok so a stat editor which we know is right now skeleton can be implemented using arrays and linked list now the question that immediately arises that why do we even need editors why do we need skeletons why can't we simply implement things your displayed to the user. 
311.06666666666666 to 429.8666666666667
VI editor for the wish you understand some terminology the program which uses Data Structure is called the client program if you know this very clearly that the program which uses Data Structure is called the client program it has access to the editor that is the interface nothing else just abstract and the program which implements the data structure is called implementation so we have two programs what is client program the one is implementation implementation is the one which implements the data structure and the client program is the one with just use the interface that is the outside details nothing inside ok now let's discuss the advantage let's see if someone wants to use the stack in the program that he can simply use push and pop operations without knowing its implementation user doesn't have to worry about how the operations are performed ok if someone wants to use a stack program we know that program which uses the data structure is called the client program it has access to the interface only and nothing inside so he can simply use push and pop operations without knowing its implementation apart from this if in future the implementation of stack is changed from array to linked list let se previously the stack was implemented using arrays right but now let's say it is changed to linked list then the client program will work in the same without being affected there is nothing to discuss with client program client has nothing to do with that it can simply use the interface without knowing what is going inside so if the implementation is changed from two linked list nothing will be affected in the client program this is one of the biggest advantages of using abstracted pipes now it should be clear that why we are using it because with the help of abstract data types we actually separating the two words we are just providing the user interface the rest of the details the implementation part is done in the packet user doesn't have to worry about it the implementation can go on without affecting the client program that is why the need of abstract data type. 
429.8666666666667 to 464.0
now is the conclusion of this lecture abstract data type provides obstruction wish you understand this that abstract data type provides instruction which means hiding details from the user and it is very important because user doesn't bother about that how that particular thing is implemented just have to use that thing that said this separation is required abstract data type is that's why very useful concept Ok friends this is it for now thank you for watching this presentation. 