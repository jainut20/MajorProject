2.0, 8.0
 PROGRAMMING AND
DATA STRUCTURES
Understanding Wild Pointers
U

what are wild pointers are so let's get started why pointers are all


8.0, 76.13
 PROGRAMMING AND
DATA STRUCTURES
Understanding Wild Pointers

known as an initialised pointers let me tell you they are the pointers which are initialised ok so this point is usually point to some arbitrary memory location and may cause a program to crash of this behave with a point to some memory location which we even don't know right they definitely do not contain the address of some valid memory location right so it may cause a program to crash or miss behave for example here in this case this point there has not been initialised 8 and here we're trying to be referenced this point to this means that we are trying to access the location pointed by this pointer and there are also store in this value within that location how is this may cause the program to crush it may even cause segmentation fault we are trying to write into the memory which is any legal memory basically this point may contain the address of some illegal memory location so that is why this pointer is a wild pointer it while it behaves and may cause a program to cache miss behave so this is a wide pointer without any doubt now how to avoid wild pointer what are the best practices to avoid wild point


76.13, 83.33
 WHAT IS A WILD POINTER?
Wild pointers are also known as uninitialized pointers.
These pointers usually point to some arbitrary memory location and
may cause a program to crash or misbehave.
EXAMPLE:
int main()
{
int *p;
*p = 19:
retur-n6;

the best practice is to initialise them with the address of unknown variable in this case you can clearly see


83.33, 134.67
 How TO AVOID WILD POINTERS?
E) Initialize them with the address of 0 known vgrioble.




134.67, 135.13
 How TO AVOID WILD POINTERS?
2_ E Explicitly allocate the memory and put the values in the allocated
memory.
EXAMPLE:
int main()
{
int *p = (int *)ma11oc(sizeof(int));
*9 = 8;
free(p);
return 0;




